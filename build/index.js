var ce=Object.defineProperty;var A=(e,o)=>{for(var n in o)ce(e,n,{get:o[n],enumerable:!0,configurable:!0,set:(i)=>o[n]=()=>i})};function he(e){var o=/^#?([a-f\d]{2})([a-f\d]{2})([a-f\d]{2})$/i.exec(e);return o?{r:parseInt(o[1],16),g:parseInt(o[2],16),b:parseInt(o[3],16)}:{r:255,g:255,b:255}}var G="Justin Client v2",de="Justin Client",re="rev6",ie="https://bit.ly/JustinCEag",E="#00c3ff",N=["Murturtle"],S=he(E),Xe={r:Math.round((S.r/255+Number.EPSILON)*100)/100,g:Math.round((S.g/255+Number.EPSILON)*100)/100,b:Math.round((S.b/255+Number.EPSILON)*100)/100};var U={};A(U,{init:()=>Ie});function Ie(e){e.settings=[{name:"Height",type:"Slider",min:1,max:6,step:0.5,current:1.5}],e.onUpdate=function(){if(e.getEnabled()){if(ModAPI.player.stepHeight!=e.settings[0].current)ModAPI.player.stepHeight=e.settings[0].current}},e.onEnable=function(){if(ModAPI.player!=null)ModAPI.player.stepHeight=e.settings[0].current},e.onDisable=function(){if(ModAPI.player!=null)ModAPI.player.stepHeight=0.6000000238418579}}var $={};A($,{init:()=>fe});function fe(e){e.crshInter=null,e.settings=[{name:"PPS",type:"Slider",min:20,max:20000,step:10,current:5000}];function o(){if(ModAPI.mc.theWorld!=null)for(let n=0;n<e.settings[0].current;n++)ModAPI.network.addToSendQueue(ModAPI.reflect.getClassById("net.minecraft.network.play.client.C0APacketAnimation").constructors[0]());else e.disable()}e.onEnable=function(){e.crshInter=setInterval(o,1000)},e.onDisable=function(){if(e.crshInter!=null)clearInterval(e.crshInter)}}var H={};A(H,{init:()=>Pe});function Pe(e){function o(t,a){if(t===a)return!0;if(t==null||a==null)return!1;if(t.length!==a.length)return!1;for(let g=0;g<t.length;++g)if(t[g]!==a[g])return!1;return!0}const n=(t)=>{let a=0;t.split("").forEach((s)=>{a=s.charCodeAt(0)+((a<<5)-a)});let g="#";for(let s=0;s<3;s++){const M=a>>s*8&255;g+=M.toString(16).padStart(2,"0")}return g};function i(t,a){return a=a||2,(new Array(a).join("0")+t).slice(-a)}function l(t){if(t.indexOf("#")===0)t=t.slice(1);if(t.length===3)t=t[0]+t[0]+t[1]+t[1]+t[2]+t[2];if(t.length!==6)throw new Error("Invalid HEX color.");const a=(255-parseInt(t.slice(0,2),16)).toString(16),g=(255-parseInt(t.slice(2,4),16)).toString(16),s=(255-parseInt(t.slice(4,6),16)).toString(16);return`#${i(a,2)}${i(g,2)}${i(s,2)}`}let d=document.createElement("div");d.style.position="fixed",d.style.right="0",d.style.top="0",d.style.background="#000",d.style.color="#FFF",d.style.zIndex="100",d.style.backdropFilter="blur(8px)",d.style.background="rgba(0,0,0,0.5)",d.style.borderRadius="15px",d.style.padding="10px",d.style.fontFamily="monospace",d.style.textAlign="right",d.style.fontSize="18px",d.style.userSelect="none",d.style.pointerEvents="none",document.body.appendChild(d),d.hidden=!0;let h=[],r=[];const c=d;function f({movementX:t,movementY:a}){let g=window.getComputedStyle(c),s=parseInt(g.right),M=parseInt(g.top);c.style.right=`${s-t}px`,c.style.top=`${M+a}px`}c.addEventListener("mousedown",()=>{window.addEventListener("mousemove",f)}),window.addEventListener("mouseup",()=>{window.removeEventListener("mousemove",f)}),e.onUpdate=()=>{setTimeout(()=>{if(e.getEnabled()&&ModAPI.mc.theWorld!=null&&ModAPI.mc.currentScreen==null||_()&&e.getEnabled()){if(_())d.style.pointerEvents="auto";else d.style.pointerEvents="none";d.hidden=!1,r=[];for(var t in I)r.push(I[t].function.getEnabled());if(o(h,r));else{d.innerText="";const a=document.createElement("div");a.innerText=G,a.style.fontWeight="bold",d.appendChild(a);for(var t in I)if(I[t].function.getEnabled()){const s=document.createElement("div");s.innerText=I[t].name,s.style.color=E,d.appendChild(s)}h=r}}else d.hidden=!0},1)},ModAPI.addEventListener("frame",()=>{if(!e.getEnabled()||ModAPI.mc.theWorld==null||ModAPI.mc.currentScreen!=null)d.hidden=!0,d.style.pointerEvents="none"}),e.onEnable=()=>{if(ModAPI.mc.theWorld!=null&&ModAPI.currentScreen==null)d.hidden=!1},e.onDisable=()=>{d.hidden=!0}}var Z={};A(Z,{init:()=>Ae});function Ae(e){e.settings=[{name:"Friendly Color",type:"Color",current:"#0000ff"},{name:"Enemy Color",type:"Color",current:"#ff0000"},{name:"Neutral Color",type:"Color",current:"#ffff00"}];let o=document.createElement("canvas");o.style.position="fixed",o.style.right="0",o.style.bottom="0",o.style.color="#FFF",o.style.zIndex="100",o.width=200,o.height=200,o.style.background="rgba(0,0,0,0.5)",o.style.borderRadius="100%",o.style.margin="10px",o.style.fontFamily="monospace",o.style.pointerEvents="none",o.style.userSelect="none",document.body.appendChild(o),o.hidden=!0;let n=o.getContext("2d"),i=o;function l({movementX:d,movementY:h}){let r=window.getComputedStyle(i),c=parseInt(r.left),f=parseInt(r.top);i.style.left=`${c+d}px`,i.style.top=`${f+h}px`}i.addEventListener("mousedown",()=>{window.addEventListener("mousemove",l)}),window.addEventListener("mouseup",()=>{window.removeEventListener("mousemove",l)}),e.onUpdate=()=>{setTimeout(()=>{if(e.getEnabled()&&ModAPI.mc.theWorld!=null&&ModAPI.mc.currentScreen==null||_()&&e.getEnabled()){if(_())o.style.pointerEvents="auto";else o.style.pointerEvents="none";if(o.hidden=!1,n.clearRect(0,0,200,200),ModAPI.mc.theWorld!=null)ModAPI.world.loadedEntityList.array1.forEach((d)=>{if(d!=null){const h=d.posX-ModAPI.player.posX+100,r=d.posZ-ModAPI.player.posZ+100;if(d.getRef().constructor.name=="nmce_EntityOtherPlayerMP")n.fillStyle=e.settings[1].current;else n.fillStyle=e.settings[2].current;n.fillRect(h-2.5,r-2.5,5,5)}}),n.fillStyle=e.settings[0].current,n.fillRect(97.5,97.5,5,5)}else o.hidden=!0},1)},ModAPI.addEventListener("frame",()=>{if(!e.getEnabled()||ModAPI.mc.theWorld==null||ModAPI.mc.currentScreen!=null)o.hidden=!0,o.style.pointerEvents="none"}),e.onEnable=()=>{if(ModAPI.mc.theWorld!=null&&ModAPI.currentScreen==null)o.hidden=!1},e.onDisable=()=>{o.hidden=!0}}var Q={};A(Q,{init:()=>me});function me(e){let o=[{name:"Particles",type:"Boolean",toggled:!0},{name:"Entities",type:"Boolean",toggled:!1},{name:"Weather",type:"Boolean",toggled:!0},{name:"Enchantment Book",type:"Boolean",toggled:!0},{name:"Beacon Beam",type:"Boolean",toggled:!1},{name:"Scoreboard",type:"Boolean",toggled:!1},{name:"Nametags",type:"Boolean",toggled:!1},{name:"Armor",type:"Boolean",toggled:!1},{name:"In Game Overlay",type:"Boolean",toggled:!1},{name:"Lighting",type:"Boolean",toggled:!1}],n={get(v,w){if(typeof v[w]==="object"&&v[w]!==null)return new Proxy(v[w],n);else return v[w]},set(v,w,ge){return v[w]=ge,W(),!0}};e.settings=new Proxy(o,n);const i=ModAPI.hooks.methods.nmcp_EffectRenderer_renderParticles,l=ModAPI.hooks.methods.nmcre_RenderManager_doRenderEntity,d=ModAPI.hooks.methods.nmcr_EntityRenderer_renderRainSnow,h=ModAPI.hooks.methods.nmcrt_TileEntityEnchantmentTableRenderer_renderTileEntityAt,r=ModAPI.hooks.methods.nmcrt_TileEntityBeaconRenderer_renderTileEntityAt,c=ModAPI.hooks.methods.nmcg_GuiIngame_renderScoreboard,f=ModAPI.hooks.methods.nmcre_RendererLivingEntity_renderName,t=ModAPI.hooks.methods.nmcrel_LayerArmorBase_renderLayer,a=ModAPI.hooks.methods.nmcg_GuiIngame_renderGameOverlay,g=ModAPI.hooks.methods.nlevo_GlStateManager_enableLighting,s=ModAPI.hooks.methods.nmw_World_checkLightFor,M=ModAPI.hooks.methods.nmwc_Chunk_getLightFor,L=ModAPI.hooks.methods.nmwc_EmptyChunk_getLightFor;function W(){if(e.settings[0].toggled&&e.getEnabled())ModAPI.hooks.methods.nmcp_EffectRenderer_renderParticles=()=>{};else ModAPI.hooks.methods.nmcp_EffectRenderer_renderParticles=i;if(e.settings[1].toggled&&e.getEnabled())ModAPI.hooks.methods.nmcre_RenderManager_doRenderEntity=()=>{};else ModAPI.hooks.methods.nmcre_RenderManager_doRenderEntity=l;if(e.settings[2].toggled&&e.getEnabled())ModAPI.hooks.methods.nmcr_EntityRenderer_renderRainSnow=()=>{};else ModAPI.hooks.methods.nmcr_EntityRenderer_renderRainSnow=d;if(e.settings[3].toggled&&e.getEnabled())ModAPI.hooks.methods.nmcrt_TileEntityEnchantmentTableRenderer_renderTileEntityAt=()=>{};else ModAPI.hooks.methods.nmcrt_TileEntityEnchantmentTableRenderer_renderTileEntityAt=h;if(e.settings[4].toggled&&e.getEnabled())ModAPI.hooks.methods.nmcrt_TileEntityBeaconRenderer_renderTileEntityAt=()=>{};else ModAPI.hooks.methods.nmcrt_TileEntityBeaconRenderer_renderTileEntityAt=r;if(e.settings[5].toggled&&e.getEnabled())ModAPI.hooks.methods.nmcg_GuiIngame_renderScoreboard=()=>{};else ModAPI.hooks.methods.nmcg_GuiIngame_renderScoreboard=c;if(e.settings[6].toggled&&e.getEnabled())ModAPI.hooks.methods.nmcre_RendererLivingEntity_renderName=()=>{};else ModAPI.hooks.methods.nmcre_RendererLivingEntity_renderName=f;if(e.settings[7].toggled&&e.getEnabled())ModAPI.hooks.methods.nmcrel_LayerArmorBase_renderLayer=()=>{};else ModAPI.hooks.methods.nmcrel_LayerArmorBase_renderLayer=t;if(e.settings[8].toggled&&e.getEnabled())ModAPI.hooks.methods.nmcg_GuiIngame_renderGameOverlay=()=>{};else ModAPI.hooks.methods.nmcg_GuiIngame_renderGameOverlay=a;if(e.settings[9].toggled&&e.getEnabled())ModAPI.hooks.methods.nlevo_GlStateManager_enableLighting=()=>{},ModAPI.hooks.methods.nmw_World_checkLightFor=()=>!1,ModAPI.hooks.methods.nmwc_Chunk_getLightFor=()=>15,ModAPI.hooks.methods.nmwc_EmptyChunk_getLightFor=()=>15;else ModAPI.hooks.methods.nlevo_GlStateManager_enableLighting=g,ModAPI.hooks.methods.nmw_World_checkLightFor=s,ModAPI.hooks.methods.nmwc_Chunk_getLightFor=M,ModAPI.hooks.methods.nmwc_EmptyChunk_getLightFor=L}e.onUpdate=()=>{},e.onEnable=()=>{W()},e.onDisable=()=>{W()}}var Y={};A(Y,{init:()=>Me});function Me(e){let o=[{name:"Update Chunks",type:"Boolean",toggled:!0}],n={get(d,h){if(typeof d[h]==="object"&&d[h]!==null)return new Proxy(d[h],n);else return d[h]},set(d,h,r){return console.log(`Property ${String(h)} changed from ${d[h]} to ${r}`),d[h]=r,l(),!0}};e.settings=new Proxy(o,n);const i=ModAPI.hooks.methods.nmcr_RenderGlobal_updateChunks;function l(){if(e.settings[0].toggled&&e.getEnabled())ModAPI.hooks.methods.nmcr_RenderGlobal_updateChunks=(...d)=>{setTimeout(function(){return i.apply(this,d)},1)};else ModAPI.hooks.methods.nmcr_RenderGlobal_updateChunks=i}e.onUpdate=()=>{},e.onEnable=()=>{l()},e.onDisable=()=>{l()}}var K={};A(K,{init:()=>ye});function ye(e){e.settings=[{name:"Distance",type:"Slider",min:4,max:32,step:2,current:16},{name:"Ignore Players",type:"Boolean",toggled:!0}],e.onUpdate=()=>{if(e.getEnabled())ModAPI.world.loadedEntityList.array1.forEach((o)=>{if(o!=null)if(o.getDistanceSqToEntity(ModAPI.player.getRef())<e.settings[0].current*e.settings[0].current||o.getRef().constructor.name=="nmce_EntityOtherPlayerMP"&&e.settings[1].toggled)o.renderDistanceWeight=100;else o.renderDistanceWeight=0})},e.onEnable=()=>{},e.onDisable=()=>{ModAPI.world.loadedEntityList.array1.forEach((o)=>{if(o!=null)o.renderDistanceWeight=1})}}var X={};A(X,{init:()=>ue});function ue(e){e.onEnable=()=>{ModAPI.mc.gameSettings.renderDistanceChunks=0.5,ModAPI.mc.gameSettings.saveOptions(),e.disable()}}var z={};A(z,{init:()=>_e});function _e(e){const o=ModAPI.hooks.methods.nmcg_GuiChat_drawScreen0;ModAPI.hooks.methods.nmcg_GuiChat_drawScreen0=function(...n){if(e.getEnabled()){const i=ModAPI.util.jclStrToJsStr(ModAPI.mc.currentScreen.inputField.text1.getRef());if(i.startsWith("/l ")||i.startsWith("/login ")||i.startsWith("/reg ")||i.startsWith("/register "))ModAPI.mc.currentScreen.inputField.visible1=0;else ModAPI.mc.currentScreen.inputField.visible1=1}return o.apply(this,n)},e.onDisable=()=>{if(ModAPI.mc.currentScreen!=null){if(ModAPI.mc.currentScreen.inputField!=null)ModAPI.mc.currentScreen.inputField.visible1=1}}}var J={};A(J,{init:()=>ke});function ke(e){let o=ModAPI.reflect.getClassById("net.minecraft.client.renderer.Tessellator").staticMethods.getInstance.method().$worldRenderer,n=ModAPI.reflect.getClassById("net.minecraft.client.renderer.Tessellator").staticMethods.getInstance.method();e.settings=[];const i=ModAPI.hooks.methods.nmcre_RenderManager_renderDebugBoundingBox;class l{constructor(){if(e.getEnabled())ModAPI.hooks.methods.nmcre_RenderManager_renderDebugBoundingBox=function(...d){ModAPI.hooks.methods.nlevo_GlStateManager_disableDepth(),i.apply(this,d),ModAPI.hooks.methods.nlevo_GlStateManager_enableDepth()};else ModAPI.hooks.methods.nmcre_RenderManager_renderDebugBoundingBox=i}static onClick(){n.remove()}}e.onUpdate=()=>{if(e.getEnabled()&&ModAPI.mc.renderManager!=null)ModAPI.mc.renderManager.debugBoundingBox=1},e.onEnable=()=>{if(new l,ModAPI.mc.renderManager)ModAPI.mc.renderManager.debugBoundingBox=1},e.onDisable=()=>{if(new l,ModAPI.mc.renderManager)ModAPI.mc.renderManager.debugBoundingBox=0}}var q={};A(q,{init:()=>Ee});function Ee(e){let o=[{name:"Red",type:"Slider",min:0,max:1,step:0.1,current:S.r},{name:"Green",type:"Slider",min:0,max:1,step:0.1,current:S.g},{name:"Blue",type:"Slider",min:0,max:1,step:0.01,current:S.b},{name:"Alpha",type:"Slider",min:0,max:1,step:0.01,current:1}],n={get(r,c){if(typeof r[c]==="object"&&r[c]!==null)return new Proxy(r[c],n);else return r[c]},set(r,c,f){return r[c]=f,h(),!0}};e.settings=new Proxy(o,n);let i=ModAPI.reflect.getClassById("net.minecraft.client.renderer.Tessellator").staticMethods.getInstance.method().$worldRenderer,l=ModAPI.reflect.getClassById("net.minecraft.client.renderer.Tessellator").staticMethods.getInstance.method();const d=ModAPI.hooks.methods.nmcr_RenderGlobal_func_181561_a;function h(){if(e.getEnabled())ModAPI.hooks.methods.nmcr_RenderGlobal_func_181561_a=function(...r){ModAPI.hooks.methods.nlevo_GlStateManager_color(o[0].current,o[1].current,o[2].current,o[3].current),d.apply(this,r),ModAPI.hooks.methods.nlevo_GlStateManager_color(1,1,1,1)};else ModAPI.hooks.methods.nmcr_RenderGlobal_func_181561_a=d}e.onEnable=()=>{h()},e.onDisable=()=>{h()}}var D={};A(D,{init:()=>pe});function pe(e){e.crshInter=null,e.settings=[{name:"Reach",type:"Slider",min:0,max:6,step:0.1,current:3},{name:"Ignore GUI",type:"Boolean",toggled:!1},{name:"Attack Delay (ms)",type:"Slider",min:125,max:500,step:5,current:125},{name:"Packet Look",type:"Boolean",toggled:!1},{name:"Packet Click",type:"Boolean",toggled:!1},{name:"Disable On Death",type:"Boolean",toggled:!0}],e.toggleKey="KeyN";let o=0;const n=ModAPI.reflect.getClassByName("C03PacketPlayer$C05PacketPlayerLook").constructors[1],i=ModAPI.hooks.methods.nmcg_GuiGameOver_initGui;ModAPI.hooks.methods.nmcg_GuiGameOver_initGui=function(...l){if(e.settings[5].toggled&&e.getEnabled())e.disable();return i.apply(this,l)},e.onUpdate=()=>{if(e.getEnabled())if(ModAPI.mc.theWorld){let l=!1;if(ModAPI.mc.currentScreen==null||e.settings[1].toggled)l=!1,ModAPI.world.loadedEntityList.array1.forEach((d)=>{if(d!=null){if(d.getRef().constructor.name=="nmce_EntityOtherPlayerMP"){if(!l){const{posX:h,posY:r,posZ:c}=d,f=h-ModAPI.player.posX,t=r-ModAPI.player.posY,a=c-ModAPI.player.posZ,g=Math.sqrt(f*f+a*a),s=Math.atan2(a,f)*180/Math.PI-90,M=-(Math.atan2(t,g)*180/Math.PI);if(g<=e.settings[0].current&&Math.abs(t)<=e.settings[0].current&&Date.now()-o>e.settings[2].current){if(l=!0,ModAPI.mc.pointedEntity!=null){if(ModAPI.mc.pointedEntity.getEntityId()!=d.getEntityId())if(e.settings[3].toggled)setTimeout(()=>{ModAPI.network.addToSendQueue(n(s,M,ModAPI.player.onGround))},1);else ModAPI.player.rotationYaw=s,ModAPI.player.rotationPitch=M}else if(e.settings[3].toggled)setTimeout(()=>{ModAPI.network.addToSendQueue(n(s,M,ModAPI.player.onGround))},1);else ModAPI.player.rotationYaw=s,ModAPI.player.rotationPitch=M;if(setTimeout(()=>{if(e.settings[4].toggled)ModAPI.network.addToSendQueue(ModAPI.reflect.getClassById("net.minecraft.network.play.client.C0APacketAnimation").constructors[0]()),ModAPI.network.addToSendQueue(ModAPI.reflect.getClassByName("C02PacketUseEntity").constructors[1](d.getRef(),ModAPI.hooks.methods.nmnpc_C02PacketUseEntity$Action_values().data[1]));else ModAPI.clickMouse()},1),e.settings[3].toggled)setTimeout(()=>{ModAPI.network.addToSendQueue(n(ModAPI.player.rotationYaw,ModAPI.player.rotationPitch,ModAPI.player.onGround))},50)}}}}})}else e.disable()},e.onEnable=()=>{},e.onDisable=()=>{}}var j={};A(j,{init:()=>Se});function Se(e){e.crshInter=null,e.settings=[{name:"TPS",type:"Slider",min:1,max:30,step:0.5,current:22}],e.toggleKey="KeyNone",e.onUpdate=()=>{if(ModAPI.mc.timer!=null&&e.getEnabled())ModAPI.mc.timer.ticksPerSecond=e.settings[0].current},e.onEnable=()=>{ModAPI.mc.timer.ticksPerSecond=e.settings[0].current},e.onDisable=()=>{ModAPI.mc.timer.ticksPerSecond=20}}var V={};A(V,{init:()=>xe});function xe(e){e.onUpdate=()=>{if(e.getEnabled())ModAPI.mc.rightClickDelayTimer=0}}var O={};A(O,{init:()=>Re});function Re(e){e.onUpdate=()=>{if(e.getEnabled()){if(ModAPI.mc.gameSettings.keyBindJump.isPressed())setTimeout(()=>{ModAPI.player.jump()},1)}}}var ee={};A(ee,{init:()=>ve});function ve(e){const o=ModAPI.reflect.getClassByName("C03PacketPlayer$C05PacketPlayerLook").constructors[1];e.onUpdate=()=>{if(e.getEnabled()==!0){if(ModAPI.mc.theWorld!=null){if(ModAPI.player.fallDistance>2)setInterval(()=>{ModAPI.network.addToSendQueue(o(ModAPI.player.rotationYaw,ModAPI.player.rotationPitch,1))},1)}}else e.disable()}}var oe={};A(oe,{init:()=>we});function we(e){e.settings=[{name:"Distance",type:"Slider",min:1,max:3,step:1,current:1}],e.toggleKey="KeyB";const o=ModAPI.reflect.getClassByName("C07PacketPlayerDigging").constructors[1],n=ModAPI.hooks.methods.nmnpc_C07PacketPlayerDigging$Action_values().data[0],i=ModAPI.hooks.methods.nmnpc_C07PacketPlayerDigging$Action_values().data[2],l=ModAPI.reflect.getClassByName("BlockPos").constructors[0];let d=!1;e.onUpdate=()=>{setTimeout(()=>{let h=e.settings[0].current;if(e.getEnabled())if(ModAPI.mc.theWorld){for(let r=-h;r<h;r++)for(let c=-h;c<h;c++)for(let f=-h;f<h;f++)if(!d){if(ModAPI.world.getBlockState(l(r,c,f)).block.unlocalizedName!=null){if(ModAPI.util.jclStrToJsStr(ModAPI.world.getBlockState(l(ModAPI.player.posX+r,ModAPI.player.posY+c,ModAPI.player.posZ+f)).block.unlocalizedName.getRef())=="bed")d=!0,ModAPI.network.addToSendQueue(o(n,l(ModAPI.player.posX+r,ModAPI.player.posY+c,ModAPI.player.posZ+f),0)),ModAPI.network.addToSendQueue(o(i,l(ModAPI.player.posX+r,ModAPI.player.posY+c,ModAPI.player.posZ+f),0))}}}else e.disable();if(d)e.disable()},1)},e.onEnable=()=>{d=!1},e.onDisable=()=>{d=!1}}var ne={};A(ne,{init:()=>Ce});function Ce(e){e.toggleKey="KeyH";const o=ModAPI.reflect.getClassByName("BlockPos").constructors[0];let n=!1;e.onUpdate=()=>{if(e.getEnabled())setTimeout(()=>{if(ModAPI.world.isAirBlock(o(Math.floor(ModAPI.player.posX),ModAPI.player.posY-0.6,Math.floor(ModAPI.player.posZ)))&&ModAPI.player.onGround&&ModAPI.player.onGround)ModAPI.mc.gameSettings.keyBindSneak.pressed=1,n=!0;else if(n)n=!1,ModAPI.mc.gameSettings.keyBindSneak.pressed=0},1)},e.onDisable=()=>{ModAPI.mc.gameSettings.keyBindSneak.pressed=0}}function m(e){this.enabledDONOTUSE=!1,this.init=function(){},this.onEnable=function(){},this.onDisable=function(){},this.enable=function(){this.enabledDONOTUSE=!0,this.onEnable(),C("enable")},this.disable=function(){this.enabledDONOTUSE=!1,this.onDisable(),C("disable")},this.onKey=function(o){},this.onMCKey=function(o){},this.getEnabled=function(){return this.enabledDONOTUSE},this.toggle=function(){if(this.enabledDONOTUSE=!this.enabledDONOTUSE,this.enabledDONOTUSE)this.onEnable();else this.onDisable()},this.onUpdate=function(){},this.onFrame=()=>{},this.toggleKey="KeyNone",this.alert=function(){alert()},this.settings=[],e.init(this)}var b={movement:"Movement",player:"Player",render:"Render",fun:"Fun"},I={arraylist:{name:"Array List",function:new m(H),category:"Render",description:"Shows your enabled mods"},minimap:{name:"Mini Map",function:new m(Z),category:"Render",description:"Shows nearby entities"},renderdisabler:{name:"Render Disabler",function:new m(Q),category:"Render",description:"Disable some renders and get more fps"},asyncevents:{name:"Async Events",function:new m(Y),category:"Render",description:"Asynchronize intensive events, not supported with shaders and VERY buggy. Best for pvp serveres"},entitydistance:{name:"Entity Distance",function:new m(K),category:"Render",description:"Lowers entity distance to improve performance"},onerenderdistance:{name:"True One Chunk",function:new m(X),category:"Render",description:"Actual one chunk render distance"},passwordhider:{name:"Password Hider",function:new m(z),category:"Render",description:"Hides password when typing it in"},esp:{name:"ESP",function:new m(J),category:"Render",description:"Shows entities through walls"},outline:{name:"Custom Outline",function:new m(q),category:"Render",description:"Change the color of the properties of the block outline"},killaura:{name:"Kill Aura",function:new m(D),category:"Combat",description:"Attack players around you"},step:{name:"Step",function:new m(U),category:"Movement",description:"Allows you to step higher"},safewalk:{name:"Safe Walk",function:new m(ne),category:"Movement",description:"Shift at ledges of blocks"},timer:{name:"Timer",function:new m(j),category:"Player",description:"Modify client side tps"},fastplace:{name:"Fast Place",function:new m(V),category:"Player",description:"Allows you to place blocks fast"},airjump:{name:"Air Jump",function:new m(O),category:"Player",description:"Allows you to jump even if you are not on the ground"},nofall:{name:"No Fall",function:new m(ee),category:"Player",description:"You won't take any fall damage"},bednuker:{name:"Bed Nuker",function:new m(oe),category:"Player",description:"Destroy beds through defenses"},servercrasher:{name:"Server Crasher",function:new m($),category:"Exploit",description:"Sends just a few swing packets ;)"}};function Te(){if(document.getElementById("ui")!=null)document.getElementById("ui").remove();if(ModAPI.hooks.methods.nmcg_GuiIngameMenu_drawScreen=be,ModAPI.mc.currentScreen.getRef().constructor.name==="nmcg_GuiIngameMenu")ModAPI.mc.displayGuiScreen(null)}function _(){if(document.getElementById("ui")==null)return!1;else return!0}function Le(e){const o=e.function.settings;console.log(o);const n=document.createElement("div");n.className="setting",n.style.position="absolute",n.style.color="white",n.style.backdropFilter="blur(8px)",n.style.background="rgba(0,0,0,0.5)",n.style.borderRadius="15px",n.style.padding="15px",n.style.fontFamily="monospace",n.style.overflowX="hidden",n.style.overflowX="auto",n.style.width="15%",n.style.height="50%",n.style.top="100px",n.style.left="100px",n.style.userSelect="none",n.style.zIndex="1000",n.style.backdropFilter="blur(8px)",n.style.resize="both";const i=document.createElement("div");i.innerText=e.name,i.style.fontSize="22px",n.appendChild(i);const l=document.createElement("div");l.innerText="X",l.style.fontSize="28px",l.style.position="absolute",l.style.right="15px",l.style.top="10px",l.style.cursor="pointer",l.onclick=function(){n.remove()},n.appendChild(l);const d=n;function h({movementX:f,movementY:t}){let a=window.getComputedStyle(d),g=parseInt(a.left),s=parseInt(a.top);d.style.left=`${g+f}px`,d.style.top=`${s+t}px`}i.addEventListener("mousedown",()=>{window.addEventListener("mousemove",h)}),window.addEventListener("mouseup",()=>{window.removeEventListener("mousemove",h)}),document.body.appendChild(n);const r=document.createElement("button");r.innerText="Toggle",r.style.border="none",r.style.color="#FFF",r.style.background="rgba(100,100,100,0.5)",r.style.width="100%",r.style.margin="5px",r.style.borderRadius="10px",r.style.fontSize="18px",r.style.padding="10px 5px 10px 5px",r.onclick=()=>{e.function.toggle(),C("toggle")},n.appendChild(r);const c=document.createElement("button");if(e.function.toggleKey!=null)c.innerText=e.function.toggleKey;else c.innerText="No key set";c.style.border="none",c.style.color="#FFF",c.style.background="rgba(100,100,100,0.5)",c.style.width="100%",c.style.margin="5px",c.style.borderRadius="10px",c.style.fontSize="18px",c.style.padding="10px 0px 10px 0px",c.onclick=()=>{c.innerText="Press any key or esc...",window.addEventListener("keydown",f);function f(t){if(t.code=="Escape")e.function.toggleKey="KeyNone";else e.function.toggleKey=t.code;c.innerText=e.function.toggleKey,window.removeEventListener("keydown",f)}},n.appendChild(c);for(let f in o)if(o.hasOwnProperty(f)){const t=o[f],a=document.createElement("div");if(a.style.background="rgba(100,100,100,0.5)",a.style.margin="5px",a.style.padding="5px",a.style.borderRadius="10px",n.appendChild(a),t.type=="List"){const g=document.createElement("div");g.style.fontSize="20px",g.innerText=`${t.name} - ${t.current}`,a.appendChild(g);const s=document.createElement("select");s.onchange=()=>{t.current=parseInt(s.value),g.innerText=`${t.name} - ${t.current}`};for(let M in t.modes){if(t.modes.hasOwnProperty(M)){const L=document.createElement("option");L.innerText=t.modes[M],L.value=`${M}`}a.appendChild(s)}}else if(t.type=="Slider"){const g=document.createElement("div");g.style.fontSize="20px",g.innerText=`${t.name} - ${t.current}`,a.appendChild(g);const s=document.createElement("input");s.type="range",s.style.width="100%",s.step=t.step,s.min=t.min,s.max=t.max,s.value=t.current,s.onchange=()=>{t.current=parseFloat(s.value),g.innerText=`${t.name} - ${t.current}`},a.appendChild(s)}else if(t.type=="Boolean"){const g=document.createElement("div");g.style.fontSize="20px",g.innerText=`${t.name} - ${t.toggled}`,a.appendChild(g);const s=document.createElement("input");s.type="checkbox",s.checked=t.toggled,s.onchange=()=>{t.toggled=s.checked,g.innerText=`${t.name} - ${t.toggled}`},a.appendChild(s)}else if(t.type=="Color"){const g=document.createElement("div");g.style.fontSize="20px",g.innerText=`${t.name} - ${t.current}`,a.appendChild(g);const s=document.createElement("input");s.type="color",s.value=t.current,s.onchange=()=>{t.current=s.value,g.innerText=`${t.name} - ${t.current}`},a.appendChild(s)}}}function Ge(){ModAPI.hooks.methods.nmcg_GuiIngameMenu_drawScreen=()=>{},document.exitPointerLock();const e=G,o=document.createElement("div");o.style.animation="fade-in 0.5s",o.id="ui",o.style.position="fixed",o.style.width="66%",o.style.height="66%",o.style.top=`${document.body.clientHeight*0.165}px`,o.style.left=`${document.body.clientWidth*0.165}px`,o.style.color="white",o.style.backdropFilter="blur(8px)",o.style.background="rgba(0,0,0,0.75)",o.style.borderRadius="15px",o.style.padding="15px",o.style.fontFamily="monospace",o.style.overflowY="hidden",o.style.userSelect="none",o.style.zIndex="1000",document.body.appendChild(o);const n=document.createElement("div");n.innerText=e,n.style.fontSize="24px",n.style.margin="5px",o.appendChild(n);const i=document.createElement("input");i.style.width="33%",i.type="text",i.style.border="solid 2px rgba(200,200,200,0.5)",i.style.borderRadius="10px",i.style.color="rgba(255,255,255,1)",i.style.display="inline-block",i.style.padding="8px",i.style.marginLeft="20px",i.style.fontSize="22px",i.style.background="rgba(50,50,50,.24)",i.placeholder="\uD83D\uDD0E\uFE0E Search",i.style.backdropFilter="blur(8px)";const l=document.createElement("div");l.innerText="X",l.style.fontSize="28px",l.style.position="absolute",l.style.right="15px",l.style.top="10px",l.style.cursor="pointer",l.onclick=function(){Te()},o.appendChild(l);const d=document.createElement("div");d.style.overflowX="scroll",o.appendChild(d);for(let h in b)if(b.hasOwnProperty(h)){const r=document.createElement("div");r.innerText=b[h],r.style.fontSize="18px",r.style.cursor="pointer",r.style.display="inline-block",r.style.padding="10px",r.style.margin="5px",r.style.background="rgba(100,100,100,0.5)",r.style.borderRadius="5px",r.onclick=()=>{}}B=document.createElement("center"),B.style.height="90%",B.style.overflowY="scroll",o.appendChild(B),C("ui")}function C(e){if(console.log(e),_()){B.innerHTML="";for(let o in I)if(I.hasOwnProperty(o)){const n=document.createElement("div");n.addEventListener("click",(d)=>{console.log(I[o]),I[o].function.toggle(),C("modl")});const i=document.createElement("div");i.innerText=`${I[o].name}`,i.style.fontSize="22px",i.style.fontWeight="bold",n.appendChild(i),n.appendChild(document.createElement("hr"));const l=document.createElement("div");if(l.innerText=`${I[o].description}`,n.appendChild(l),n.style.textAlign="left",n.style.display="inline-block",n.style.overflowX="hidden",n.style.width="25%",n.style.height="25%",n.style.padding="5px",n.style.borderRadius="15px",n.style.margin="10px",n.style.cursor="pointer",n.style.overflowY="scroll",n.style.background="rgba(100,100,100,0.5)",I[o].function.getEnabled())n.style.boxShadow=`0px 0px 15px ${E}`;n.oncontextmenu=(d)=>{d.preventDefault(),new Le(I[o]),console.log(I[o])},B.appendChild(n)}}}function se(e){if(e.code=="ShiftRight"){if(!_())Ge()}if(ModAPI.mc.currentScreen==null&&ModAPI.mc.ingameGUI!=null){for(let o in I)if(e.code==I[o].function.toggleKey)I[o].function.toggle()}}var B,be=ModAPI.hooks.methods.nmcg_GuiIngameMenu_drawScreen;function le(){P.style.animation="",P.style.opacity="1",P.style.display="block"}function T(){setTimeout(()=>{P.style.animation="fade-out 0.5s linear",setTimeout(()=>{P.style.opacity="0",P.style.display="none"},450)},100)}function R(e,o){const n=document.createElement("button");return Object.assign(n.style,Ne),n.innerText=e,n.onclick=o,n}ModAPI.meta.title("Justin v2");ModAPI.meta.credits("Murturtle");ModAPI.meta.description("Press right shift ;)");ModAPI.require("player");ModAPI.require("network");ModAPI.require("settings");ModAPI.require("world");I.arraylist.function.enable();I.minimap.function.enable();I.renderdisabler.function.enable();I.passwordhider.function.enable();I.asyncevents.function.enable();I.outline.function.enable();var Fe=ModAPI.hooks.methods.nmcg_GuiMainMenu_initGui;ModAPI.hooks.methods.mainMenuInitGui=function(...e){return le(),setTimeout(()=>{if(ModAPI.mc.currentScreen!=null)if(ModAPI.mc.currentScreen.getRef().constructor.name==="nmcg_GuiMainMenu"&&P.style.display==="block")console.log(ModAPI.mc.currentScreen.getRef().constructor.name);else T();else T()},250),Fe.apply(this,e)};var We=ModAPI.hooks.methods.nmcg_GuiMainMenu_drawScreen;ModAPI.hooks.methods.mainMenuDrawScreen=function(...e){return le(),We.apply(this,e)};var P=document.createElement("div");P.style.position="fixed";P.style.top="0";P.style.left="0";P.style.bottom="0";P.style.left="0";P.style.background="rgba(50,50,50,1)";P.style.width="100%";P.style.height="100%";P.style.fontFamily="monospace";P.style.display="none";document.body.appendChild(P);var k=document.createElement("div");k.innerText=de;k.style.textShadow=`${E} 3px 3px 0px`;k.style.color="white";k.style.display="flex";k.style.justifyContent="center";k.style.fontSize="5em";k.style.marginTop="10%";P.appendChild(k);var F=document.createElement("div");F.style.fontSize=".2em";F.innerText=re;F.style.textShadow="none";k.appendChild(F);var y=document.createElement("div");y.style.background="rgba(100,100,100,1)";y.style.position="fixed";y.style.width="25%";y.style.left="20%";y.style.padding="10px";y.style.borderRadius="15px";y.style.top="60%";y.style.transform="translate(0,-50%)";P.appendChild(y);var Ne={background:"rgba(50,50,50,1)",fontFamily:"monospace",color:"white",width:"100%",border:"none",borderRadius:"10px",padding:"15px",textAlign:"left",fontSize:"1.5em",marginTop:"7px",marginBottom:"7px"},Ue=R("Singleplayer",()=>{ModAPI.mc.displayGuiScreen(ModAPI.reflect.getClassByName("GuiScreenIntegratedServerStartup").constructors[0](ModAPI.mc.currentScreen.getRef())),T()});y.appendChild(Ue);var $e=R("Multiplayer",()=>{ModAPI.mc.displayGuiScreen(ModAPI.reflect.getClassByName("GuiMultiplayer").constructors[0](ModAPI.mc.currentScreen.getRef())),T()});y.appendChild($e);var He=R("Options",()=>{ModAPI.mc.displayGuiScreen(ModAPI.reflect.getClassByName("GuiOptions").constructors[0](ModAPI.mc.currentScreen.getRef())),T()});y.appendChild(He);var Ze=R("Edit Profile",()=>{ModAPI.mc.displayGuiScreen(ModAPI.reflect.getClassByName("GuiScreenEditProfile").constructors[0](ModAPI.mc.currentScreen.getRef())),T()});y.appendChild(Ze);var u=document.createElement("div");u.style.background="rgba(100,100,100,1)";u.style.position="fixed";u.style.width="25%";u.style.padding="10px";u.style.borderRadius="15px";u.style.top="60%";u.style.transform="translate(0,-50%)";u.style.right="20%";P.appendChild(u);var Qe=R("Click Gui",()=>{if(!_())open()});u.appendChild(Qe);var te=R("Downloads",()=>{alert(ie)});te.style.overflowX="auto";te.style.overflowY="auto";u.appendChild(te);var Ye=R("Exit",()=>{window.location.replace("https://google.com")});u.appendChild(Ye);var x=document.createElement("div"),ae="Created By: ";N.forEach((e,o)=>{ae+=o===N.length-1?e:`${e} & `});x.innerText=ae;x.style.position="fixed";x.style.bottom="0";x.style.left="0";x.style.color=E;x.style.fontSize="1.5em";P.appendChild(x);document.addEventListener("keydown",se);ModAPI.addEventListener("update",()=>{for(let e in I)if(I.hasOwnProperty(e))I[e].function.onUpdate()});document.body.appendChild(document.createElement("style"));var p=document.styleSheets[0];p.insertRule(`
  @keyframes fade-in {
    from { opacity: 0; }
    to { opacity: 1; }
  }
`);p.insertRule(`
  ::-webkit-scrollbar {
    width: 10px;
  }
`);p.insertRule(`
  ::-webkit-scrollbar-track {
    background: rgba(0, 0, 0, 0);
  }
`);p.insertRule(`
  ::-webkit-scrollbar-thumb {
    background: rgba(100, 100, 100, 0.5);
    filter: blur(4px);
  }
`);p.insertRule(`
  ::-webkit-resizer {
    background: rgba(0, 0, 0, 0);
    opacity: 0;
    display: none;
  }
`);p.insertRule(`
  ::-webkit-scrollbar-corner {
    background: rgba(0, 0, 0, 0);
    opacity: 0;
    display: none;
  }
`);p.insertRule(`
  @keyframes rgb-glow {
    0% { box-shadow: 0px 0px 40px rgba(255, 0, 0, 0.75); }
    16% { box-shadow: 0px 0px 40px rgba(255, 255, 0, 0.75); }
    33% { box-shadow: 0px 0px 40px rgba(0, 255, 0, 0.75); }
    50% { box-shadow: 0px 0px 40px rgba(0, 255, 255, 0.75); }
    66% { box-shadow: 0px 0px 40px rgba(0, 0, 255, 0.75); }
    83% { box-shadow: 0px 0px 40px rgba(255, 0, 255, 0.75); }
    100% { box-shadow: 0px 0px 40px rgba(255, 0, 0, 0.75); }
  }
`);p.insertRule(`
  @keyframes rgb-text {
    0% { color: rgba(255, 0, 0, 0.75); }
    16% { color: rgba(255, 255, 0, 0.75); }
    33% { color: rgba(0, 255, 0, 0.75); }
    50% { color: rgba(0, 255, 255, 0.75); }
    66% { color: rgba(0, 0, 255, 0.75); }
    83% { color: rgba(255, 0, 255, 0.75); }
    100% { color: rgba(255, 0, 0, 0.75); }
  }
`);

//# debugId=A322B17BBBEBBEE264756E2164756E21
//# sourceMappingURL=data:application/json;base64,
